// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    
    // ALU Portion
    // A will have an input no matter what, C will load ALU output and the control bit will be if the A register is saved to
    
    // load A register, either aluOutput will be stored in A by C instruction's dest[1] (instruction[5])
    // or A will store A instruction's value if instruction[15] = 0
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=aIn); // decides between instruction and alu output for AReg input

    Mux(a=true, b=instruction[5], sel=instruction[15], out=aLoad); // decides between op-code or dest code if a or not

    ARegister(in=aIn, load=aLoad, out=A); // input either aluOutput or AInstruction Value using op code or dest code (to store)
    
    // x and Y for ALU	
    Mux16(a=A, b=inM, sel=instruction[12], out=aluX); // C instruction 12 is a comp1(a) that decides whether to use A or M in ALU
    Mux(a=instruction[15], b=instruction[4], sel=instruction[15], out=dLoad); // if address bit, don't load into D
    DRegister(in=aluOut, load=dLoad, out=D); // instruction[4] = d2, d2 decides if D is a destination
    
    // alu
    // doesn't matter what alu computes for A, because it will not be stored anywhere

    ALU(x=D, y=aluX, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, zr=zr, ng=ng);
    
    // outM, whether or not to store aluOut in data memory, writeM
    And16(a=aluOut, b=true, out=outM);
    Mux(a=instruction[15], b=instruction[3], sel=instruction[15], out=writeM);

    // PC Portion
    // if address, PC++
    // else evaluate condition, if 000; PC++, if 111; PC=A, else conditional = True, PC= A or PC++
    
    Or(a=instruction[0], b=instruction[1], out=notZero1); 
    Or(a=instruction[2], b=notZero1, out=notZero); // prevents 000

    And(a=ng, b=instruction[2], out=J1);
    And(a=zr, b=instruction[1], out=J2);
    Or(a=zr, b=ng, out=posZg);
    Not(in=posZg, out=zg);
    And(a=zg, b=instruction[0], out=J3);
    
    Or(a=J1, b=J2, out=J12);
    Or(a=J12, b=J3, out=J123);
    And(a=J123, b=notZero, out=pcLoad1);
    And(a=instruction[15], b=pcLoad1, out=pcLoad);
    Not(in=pcLoad, out=pcInc);


    PC(in=A, load=pcLoad, inc=pcInc, reset=reset, out[0..14]=pc);
    And16(a=A, b=true, out[0..14]=addressM);
}

